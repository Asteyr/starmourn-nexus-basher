{"name":"nexus community basher","enabled":true,"description":"","type":"group","id":1,"items":[{"type":"function","name":"onLoad","enabled":true,"id":2,"code":"const VERSION = 0.6; //this version of the .nxs package.\nconst branch = 'main'; //change this if you want a different branch\nconst user = \"rocketcatmultiverse\" //change this if you've forked.\nvar url = 'https://raw.githubusercontent.com/'+user+'/starmourn-nexus-basher/'+branch+'/'\nvar manifest;\nvar q = $.when(1);\nvar p = $.when(1);\nvar r = $.when(1);\nvar loaded = [];\n\nq = q.then(function(){\n    //start by grabbing the manifest.\n    return $.ajax({\n        url: url + 'MANIFEST?v=' + new Date().getTime()\n    }).done(function(data) {\n        console.log(\"Trying parse of manifest.\");\n        console.log([data]);\n        try {\n            manifest = eval(data);\n            //then grab main.js and initialize nb namespace\n            r = r.then(function(){\n                return $.ajax({\n                    url: url+\"main.js?v=\" + new Date().getTime()\n                }).done(function(data) {\n        \t\t\tconsole.log(\"Trying eval of main.js.\");\n       \t\t\t\tconsole.log([data]);\n                    try {\n                        eval(data);\n                        console.log(\"Loaded main.js on branch \"+branch+\".\",\"green\");\n                        if (branch !== \"main\") {\n                                nb.debugMode = true;\n                            \tdisplay_notice(\"We are not on main branch, debug mode is on\",\"yellow\");\n                        }\n                        nb.version = {\"nxs\":VERSION};\n                        nb.updateCheck(); // check for updates to our .nxs\n                        //now go through the manifest and grab everything!\n                        manifest.forEach(function(item, indem) {\n                            let a = url + item + '.js';\n                            p = p.then(function() {\n                                return $.ajax({\n                                url: a + '?v=' + new Date().getTime()\n                                }).done(function(data) {\n                                    console.log('Trying eval(data) for ' + a + '.')\n                                    console.log([data])\n                                    try {\n                                        eval(data);\n                                        console.log(\"Loaded \"+item+\" on branch \"+branch+\".\",\"green\");\n                                        loaded.push(item);\n                                        if (loaded.length === manifest.length) \n                                        {\n                      \t\t\t\t\t\trun_function(\"ascii-tables\",\"\",\"Nexus community basher\");\n                                            nb.onLoad();\n                                        }\n                                    } catch(err) { \n                                        display_notice(\"Nexus community basher failed to load at \"+item+\".js, see console for error.\",\"red\");\n                                        console.log(err); \n                                    }\n                                    })\n                            })\n                        })\n                        \n                    } catch (err) {\n                        display_notice(\"Nexus community basher failed to load at main.js, see console for error.\",\"red\");\n                        console.log(err); \n                    }\n                })\n            });\n        } catch (err){\n            display_notice(\"Nexus community basher failed to load at MANIFEST, see console for error.\",\"red\");\n            console.log(err);\n        }\n    })\n});"},{"type":"function","name":"onGMCP","enabled":true,"id":5,"code":"if (typeof nb == \"undefined\" || typeof nb.gmcp == \"undefined\") return;\nnb.gmcp(args.gmcp_method,args.gmcp_args);"},{"type":"trigger","name":"","enabled":true,"id":3,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^(.+)$","actions":[{"action":"script","script":"if (typeof nb == \"undefined\" || typeof nb.trigger == \"undefined\") return;\nnb.trigger(args[1]);"}]},{"type":"alias","name":"","enabled":true,"id":4,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (typeof nb == \"undefined\" ||\n   typeof nb.alias == \"undefined\" ||\n   !nb.alias(args[0])) {\n    // this allows both direct sends and function calls, in case users have aliases that start in nb.\n    client.aliases_enabled = false;\n    send_command(args[0]);\n    client.aliases_enabled = true;\n}"}],"text":"^nb(.+)$"},{"type":"function","name":"userConfigs","enabled":true,"id":6,"code":"nb.userConfigs = {\n\t//insert your configuration options here.\n    //they are structured like this.\n    //\"name_of_the_config\" : value,    // the left side of the colon (the name of the config) should ideally be in quotes. The right side should be a value followed by a comma. \n    \"sample_configuration_string\":\"test string\", //strings must be surrounded in double quotes\n    \"sample_configuration_boolean\":true, //booleans must be either true or false, with no quotes.\n    \"sample_configuration_number\":0.6, //numbers can only be... well... numbers\n    \n};\n\n\n\n\n\n\n\n\n\n\n\n//don't touch this\nnb.loadUserConfigs();"},{"type":"function","name":"ascii-tables","enabled":true,"id":7,"code":"if (typeof AsciiTable !== \"undefined\") return;\n/**\n * (c) 2013 Beau Sorensen\n * MIT Licensed\n * For all details and documentation:\n * https://github.com/sorensen/ascii-table\n */\n\n(function() {\n'use strict';\n\n/*!\n * Module dependencies\n */\n\nvar slice = Array.prototype.slice\n  , toString = Object.prototype.toString\n\n/**\n * AsciiTable constructor\n *\n * @param {String|Object} title or JSON table\n * @param {Object} table options\n *  - `prefix` - string prefix added to each line on render\n * @constructor\n * @api public\n */\n\nfunction AsciiTable(name, options) {\n  this.options = options || {}\n  this.reset(name)\n}\n\n/*!\n * Alignment constants\n */\n\nAsciiTable.LEFT = 0\nAsciiTable.CENTER = 1\nAsciiTable.RIGHT = 2\n\n/*!\n * Static methods\n */\n\n/**\n * Create a new table instance\n *\n * @param {String|Object} title or JSON table\n * @param {Object} table options\n * @api public\n */\n\nAsciiTable.factory = function(name, options) {\n  return new AsciiTable(name, options)\n}\n\n/**\n * Align the a string at the given length\n *\n * @param {Number} direction\n * @param {String} string input\n * @param {Number} string length\n * @param {Number} padding character\n * @api public\n */\n\nAsciiTable.align = function(dir, str, len, pad) {\n  if (dir === AsciiTable.LEFT) return AsciiTable.alignLeft(str, len, pad)\n  if (dir === AsciiTable.RIGHT) return AsciiTable.alignRight(str, len, pad)\n  if (dir === AsciiTable.CENTER) return AsciiTable.alignCenter(str, len, pad)\n  return AsciiTable.alignAuto(str, len, pad)\n}\n\n/**\n * Left align a string by padding it at a given length\n *\n * @param {String} str\n * @param {Number} string length\n * @param {String} padding character (optional, default '')\n * @api public\n */\n\nAsciiTable.alignLeft = function(str, len, pad) {\n  if (!len || len < 0) return ''\n  if (str === undefined || str === null) str = ''\n  if (typeof pad === 'undefined') pad = ' '\n  if (typeof str !== 'string') str = str.toString()\n  var alen = len + 1 - str.length\n  if (alen <= 0) return str\n  return str + Array(len + 1 - str.length).join(pad)\n}\n\n/**\n * Center align a string by padding it at a given length\n *\n * @param {String} str\n * @param {Number} string length\n * @param {String} padding character (optional, default '')\n * @api public\n */\n\nAsciiTable.alignCenter = function(str, len, pad) {\n  if (!len || len < 0) return ''\n  if (str === undefined || str === null) str = ''\n  if (typeof pad === 'undefined') pad = ' '\n  if (typeof str !== 'string') str = str.toString()\n  var nLen = str.length\n    , half = Math.floor(len / 2 - nLen / 2)\n    , odds = Math.abs((nLen % 2) - (len % 2))\n    , len = str.length\n\n  return AsciiTable.alignRight('', half, pad) \n    + str\n    + AsciiTable.alignLeft('', half + odds, pad)\n}\n\n/**\n * Right align a string by padding it at a given length\n *\n * @param {String} str\n * @param {Number} string length\n * @param {String} padding character (optional, default '')\n * @api public\n */\n\nAsciiTable.alignRight = function(str, len, pad) {\n  if (!len || len < 0) return ''\n  if (str === undefined || str === null) str = ''\n  if (typeof pad === 'undefined') pad = ' '\n  if (typeof str !== 'string') str = str.toString()\n  var alen = len + 1 - str.length\n  if (alen <= 0) return str\n  return Array(len + 1 - str.length).join(pad) + str\n}\n\n/**\n * Auto align string value based on object type\n *\n * @param {Any} object to string\n * @param {Number} string length\n * @param {String} padding character (optional, default '')\n * @api public\n */\n\nAsciiTable.alignAuto = function(str, len, pad) {\n  if (str === undefined || str === null) str = ''\n  var type = toString.call(str)\n  pad || (pad = ' ')\n  len = +len\n  if (type !== '[object String]') {\n    str = str.toString()\n  }\n  if (str.length < len) {\n    switch(type) {\n      case '[object Number]': return AsciiTable.alignRight(str, len, pad)\n      default: return AsciiTable.alignLeft(str, len, pad)\n    }\n  }\n  return str\n}\n\n/**\n * Fill an array at a given size with the given value\n *\n * @param {Number} array size\n * @param {Any} fill value\n * @return {Array} filled array\n * @api public\n */\n\nAsciiTable.arrayFill = function(len, fill) {\n  var arr = new Array(len)\n  for (var i = 0; i !== len; i++) {\n    arr[i] = fill;\n  }\n  return arr\n}\n\n/*!\n * Instance methods\n */\n\n/**\n * Reset the table state back to defaults\n *\n * @param {String|Object} title or JSON table\n * @api public\n */\n\nAsciiTable.prototype.reset = \nAsciiTable.prototype.clear = function(name) {\n  this.__name = ''\n  this.__nameAlign = AsciiTable.CENTER\n  this.__rows = []\n  this.__maxCells = 0\n  this.__aligns = []\n  this.__colMaxes = []\n  this.__spacing = 1\n  this.__heading = null\n  this.__headingAlign = AsciiTable.CENTER\n  this.setBorder()\n\n  if (toString.call(name) === '[object String]') {\n    this.__name = name\n  } else if (toString.call(name) === '[object Object]') {\n    this.fromJSON(name)\n  }\n  return this\n}\n\n/**\n * Set the table border\n *\n * @param {String} horizontal edges (optional, default `|`)\n * @param {String} vertical edges (optional, default `-`)\n * @param {String} top corners (optional, default `.`)\n * @param {String} bottom corners (optional, default `'`)\n * @api public\n */\n\nAsciiTable.prototype.setBorder = function(edge, fill, top, bottom) {\n  this.__border = true\n  if (arguments.length === 1) {\n    fill = top = bottom = edge\n  }\n  this.__edge = edge || '|'\n  this.__fill = fill || '-'\n  this.__top = top || '.'\n  this.__bottom = bottom || \"'\"\n  return this\n}\n\n/**\n * Remove all table borders\n *\n * @api public\n */\n\nAsciiTable.prototype.removeBorder = function() {\n  this.__border = false\n  this.__edge = ' '\n  this.__fill = ' '\n  return this\n}\n\n/**\n * Set the column alignment at a given index\n *\n * @param {Number} column index\n * @param {Number} alignment direction\n * @api public\n */\n\nAsciiTable.prototype.setAlign = function(idx, dir) {\n  this.__aligns[idx] = dir\n  return this\n}\n\n/**\n * Set the title of the table\n *\n * @param {String} title\n * @api public\n */\n\nAsciiTable.prototype.setTitle = function(name) {\n  this.__name = name\n  return this\n}\n\n/**\n * Get the title of the table\n *\n * @return {String} title\n * @api public\n */\n\nAsciiTable.prototype.getTitle = function() {\n  return this.__name\n}\n\n/**\n * Set table title alignment\n *\n * @param {Number} direction\n * @api public\n */\n\nAsciiTable.prototype.setTitleAlign = function(dir) {\n  this.__nameAlign = dir\n  return this\n}\n\n/**\n * AsciiTable sorting shortcut to sort rows\n *\n * @param {Function} sorting method\n * @api public\n */\n\nAsciiTable.prototype.sort = function(method) {\n  this.__rows.sort(method)\n  return this\n}\n\n/**\n * Sort rows based on sort method for given column\n *\n * @param {Number} column index\n * @param {Function} sorting method\n * @api public\n */\n\nAsciiTable.prototype.sortColumn = function(idx, method) {\n  this.__rows.sort(function(a, b) {\n    return method(a[idx], b[idx])\n  })\n  return this\n}\n\n/**\n * Set table heading for columns\n *\n * @api public\n */\n\nAsciiTable.prototype.setHeading = function(row) {\n  if (arguments.length > 1 || toString.call(row) !== '[object Array]') {\n    row = slice.call(arguments)\n  }\n  this.__heading = row\n  return this\n}\n\n/**\n * Get table heading for columns\n *\n * @return {Array} copy of headings\n * @api public\n */\n\nAsciiTable.prototype.getHeading = function() {\n  return this.__heading.slice()\n}\n\n/**\n * Set heading alignment\n *\n * @param {Number} direction\n * @api public\n */\n\nAsciiTable.prototype.setHeadingAlign = function(dir) {\n  this.__headingAlign = dir\n  return this\n}\n\n/**\n * Add a row of information to the table\n * \n * @param {...|Array} argument values in order of columns\n * @api public\n */\n\nAsciiTable.prototype.addRow = function(row) {\n  if (arguments.length > 1 || toString.call(row) !== '[object Array]') {\n    row = slice.call(arguments)\n  }\n  this.__maxCells = Math.max(this.__maxCells, row.length)\n  this.__rows.push(row)\n  return this\n}\n\n/**\n * Get a copy of all rows of the table\n *\n * @return {Array} copy of rows\n * @api public\n */\n\nAsciiTable.prototype.getRows = function() {\n  return this.__rows.slice().map(function(row) {\n    return row.slice()\n  })\n}\n\n/**\n * Add rows in the format of a row matrix\n *\n * @param {Array} row matrix\n * @api public\n */\n\nAsciiTable.prototype.addRowMatrix = function(rows) {\n  for (var i = 0; i < rows.length; i++) {\n    this.addRow(rows[i])\n  }\n  return this\n}\n\n/**\n * Add rows from the given data array, processed by the callback function rowCallback.\n *\n * @param {Array} data\n * @param (Function) rowCallback\n * @param (Boolean) asMatrix - controls if the row created by rowCallback should be assigned as row matrix\n * @api public\n */\n\nAsciiTable.prototype.addData = function(data, rowCallback, asMatrix) {\n  if (toString.call(data) !== '[object Array]') {\n    return this;\n  }\n  for (var index = 0, limit = data.length; index < limit; index++) {\n    var row = rowCallback(data[index]);\n    if(asMatrix) {\n      this.addRowMatrix(row);\n    } else {\n      this.addRow(row);\n    }\n  }\n  return this\n}\n\n  /**\n * Reset the current row state\n *\n * @api public\n */\n\nAsciiTable.prototype.clearRows = function() {\n  this.__rows = []\n  this.__maxCells = 0\n  this.__colMaxes = []\n  return this\n}\n\n/**\n * Apply an even spaced column justification\n *\n * @param {Boolean} on / off\n * @api public\n */\n\nAsciiTable.prototype.setJustify = function(val) {\n  arguments.length === 0 && (val = true)\n  this.__justify = !!val\n  return this\n}\n\n/**\n * Convert the current instance to a JSON structure\n *\n * @return {Object} json representation\n * @api public\n */\n\nAsciiTable.prototype.toJSON = function() {\n  return {\n    title: this.getTitle()\n  , heading: this.getHeading()\n  , rows: this.getRows()\n  }\n}\n\n/**\n * Populate the table from a JSON object\n *\n * @param {Object} json representation\n * @api public\n */\n\nAsciiTable.prototype.parse = \nAsciiTable.prototype.fromJSON = function(obj) {\n  return this\n    .clear()\n    .setTitle(obj.title)\n    .setHeading(obj.heading)\n    .addRowMatrix(obj.rows)\n}\n\n/**\n * Render the table with the current information\n *\n * @return {String} formatted table\n * @api public\n */\n\nAsciiTable.prototype.render =\nAsciiTable.prototype.valueOf =\nAsciiTable.prototype.toString = function() {\n  var self = this\n    , body = []\n    , mLen = this.__maxCells\n    , max = AsciiTable.arrayFill(mLen, 0)\n    , total = mLen * 3\n    , rows = this.__rows\n    , justify\n    , border = this.__border\n    , all = this.__heading \n        ? [this.__heading].concat(rows)\n        : rows\n\n  // Calculate max table cell lengths across all rows\n  for (var i = 0; i < all.length; i++) {\n    var row = all[i]\n    for (var k = 0; k < mLen; k++) {\n      var cell = row[k]\n      max[k] = Math.max(max[k], cell ? cell.toString().length : 0)\n    }\n  }\n  this.__colMaxes = max\n  justify = this.__justify ? Math.max.apply(null, max) : 0\n\n  // Get \n  max.forEach(function(x) {\n    total += justify ? justify : x + self.__spacing\n  })\n  justify && (total += max.length)\n  total -= this.__spacing\n\n  // Heading\n  border && body.push(this._seperator(total - mLen + 1, this.__top))\n  if (this.__name) {\n    body.push(this._renderTitle(total - mLen + 1))\n    border && body.push(this._seperator(total - mLen + 1))\n  }\n  if (this.__heading) {\n    body.push(this._renderRow(this.__heading, ' ', this.__headingAlign))\n    body.push(this._rowSeperator(mLen, this.__fill))\n  }\n  for (var i = 0; i < this.__rows.length; i++) {\n    body.push(this._renderRow(this.__rows[i], ' '))\n  }\n  border && body.push(this._seperator(total - mLen + 1, this.__bottom))\n\n  var prefix = this.options.prefix || ''\n  return prefix + body.join('\\n' + prefix)\n}\n\n/**\n * Create a line seperator\n *\n * @param {Number} string size\n * @param {String} side values (default '|')\n * @api private\n */\n\nAsciiTable.prototype._seperator = function(len, sep) {\n  sep || (sep = this.__edge)\n  return sep + AsciiTable.alignRight(sep, len, this.__fill)\n}\n\n/**\n * Create a row seperator\n *\n * @return {String} seperator\n * @api private\n */\n\nAsciiTable.prototype._rowSeperator = function() {\n  var blanks = AsciiTable.arrayFill(this.__maxCells, this.__fill)\n  return this._renderRow(blanks, this.__fill)\n}\n\n/**\n * Render the table title in a centered box\n *\n * @param {Number} string size\n * @return {String} formatted title\n * @api private\n */\n\nAsciiTable.prototype._renderTitle = function(len) {\n  var name = ' ' + this.__name + ' '\n    , str = AsciiTable.align(this.__nameAlign, name, len - 1, ' ')\n  return this.__edge + str + this.__edge\n}\n\n/**\n * Render an invdividual row\n *\n * @param {Array} row\n * @param {String} column seperator\n * @param {Number} total row alignment (optional, default `auto`)\n * @return {String} formatted row\n * @api private\n */\n\nAsciiTable.prototype._renderRow = function(row, str, align) {\n  var tmp = ['']\n    , max = this.__colMaxes\n\n  for (var k = 0; k < this.__maxCells; k++) {\n    var cell = row[k]\n      , just = this.__justify ? Math.max.apply(null, max) : max[k]\n      // , pad = k === this.__maxCells - 1 ? just : just + this.__spacing\n      , pad = just\n      , cAlign = this.__aligns[k]\n      , use = align\n      , method = 'alignAuto'\n  \n    if (typeof align === 'undefined') use = cAlign\n\n    if (use === AsciiTable.LEFT) method = 'alignLeft'\n    if (use === AsciiTable.CENTER) method = 'alignCenter'\n    if (use === AsciiTable.RIGHT) method = 'alignRight'\n\n    tmp.push(AsciiTable[method](cell, pad, str))\n  }\n  var front = tmp.join(str + this.__edge + str)\n  front = front.substr(1, front.length)\n  return front + str + this.__edge\n}\n\n/*!\n * Aliases\n */\n\n// Create method shortcuts to all alignment methods for each direction\n;['Left', 'Right', 'Center'].forEach(function(dir) {\n  var constant = AsciiTable[dir.toUpperCase()]\n\n  ;['setAlign', 'setTitleAlign', 'setHeadingAlign'].forEach(function(method) {\n    // Call the base method with the direction constant as the last argument\n    AsciiTable.prototype[method + dir] = function() {\n      var args = slice.call(arguments).concat(constant)\n      return this[method].apply(this, args)\n    }\n  })\n})\n\n/*!\n * Module exports.\n */\n\nif (typeof exports !== 'undefined') {\n  module.exports = AsciiTable\n} else {\n  this.AsciiTable = AsciiTable\n}\n\n}).call(this);\n"}]}